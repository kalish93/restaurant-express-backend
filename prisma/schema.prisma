generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Existing User and Role Models
model User {
  id          String    @id @default(uuid()) @db.Uuid
  firstName   String
  lastName    String
  email       String    @unique
  password    String
  roleId      String    @map("role_id") @db.Uuid
  role        Role      @relation(fields: [roleId], references: [id])
  restaurant  Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId String?   @map("restaurant_id") @db.Uuid
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
}

model Role {
  id              String           @id @default(uuid()) @db.Uuid
  name            String
  users           User[]
  permissions     Permission[]
  rolePermissions RolePermission[]
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
}

model Permission {
  id              String           @id @default(uuid()) @db.Uuid
  name            String
  roles           Role[]
  rolePermissions RolePermission[]
}

model RolePermission {
  id           String @id @default(uuid()) @db.Uuid
  roleId       String @map("role_id") @db.Uuid
  permissionId String @map("permission_id") @db.Uuid

  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
}

// New Models
model Restaurant {
  id        String    @id @default(uuid()) @db.Uuid
  name      String
  qrCodes   QRCode[]
  menuItems MenuItem[]
  orders    Order[]
  users     User[] // Users associated with this restaurant
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
}

model QRCode {
  id          String   @id @default(uuid()) @db.Uuid
  code        String   @unique
  tableNumber String?   
  restaurant  Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String   @map("restaurant_id") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
}

model MenuItem {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  price       Float
  stock       Int
  restaurant  Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String   @map("restaurant_id") @db.Uuid
  orderItems  OrderItem[]
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
}

model Order {
  id          String    @id @default(uuid()) @db.Uuid
  tableNumber String
  status      OrderStatus
  items       OrderItem[]
  restaurant  Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String   @map("restaurant_id") @db.Uuid
  bills       Bill[]    // Changed to one-to-many relationship
  kitchenOrders KitchenOrder[]
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
}

model OrderItem {
  id        String   @id @default(uuid()) @db.Uuid
  quantity  Int
  menuItem  MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId String   @map("menu_item_id") @db.Uuid
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String   @map("order_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Bill {
  id         String   @id @default(uuid()) @db.Uuid
  total      Float
  order      Order   @relation(fields: [orderId], references: [id])
  orderId    String   @map("order_id") @db.Uuid
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
}

model KitchenOrder {
  id          String    @id @default(uuid()) @db.Uuid
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     String   @map("order_id") @db.Uuid
  status      KitchenOrderStatus
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
}

// Enums
enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum KitchenOrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
